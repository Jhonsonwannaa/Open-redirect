import requests
import json
import argparse
import urllib3
from rich.console import Console
import pyfiglet
from colorama import Fore, Style
import threading
import art
from concurrent.futures import ThreadPoolExecutor, as_completed

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

text = art.text2art("OpenRedirect", font="blg")
print(Fore.GREEN + Style.BRIGHT +text+'                    Version0.1\n                    By Jhonson\n\n'+Style.RESET_ALL)




def main(payload, url, simple, headers, result):



 try:  
   list =[ii+i for i in payload for ii in url]
   simple_url=[simple+i for i in payload]    

   for i in list:
     
     r=requests.get(i,headers=headers ,verify=False, timeout=20)
     result=['true' if 'https://google.com' in r.url else None]
     if 'true' in result :

      with ThreadPoolExecutor(max_workers=100) as executor:
         
       future_to_url = {executor.submit(main, file, add, args.url,header, results): url for url in r.url} 
       for future in as_completed(future_to_url):
         url = future_to_url[future]
         print(Fore.GREEN+ Style.BRIGHT +f'[+] {r.url}'+ Style.RESET_ALL)
         break 
   
   for i in simple_url:                     
     r=requests.get(i,headers=headers, verify=False, timeout=20)
     result=['true' if 'https://google.com' in r.url else None]
     ajout=r.url
     with ThreadPoolExecutor(max_workers=100) as executor:
         
       future_to_url = {executor.submit(main, file, add, args.url,header, results): url for url in r.url} 
       for future in as_completed(future_to_url):
         url = future_to_url[future]

         if 'true' in result:

           
           print(Fore.GREEN+ Style.BRIGHT +f'[+] {ajout}'+ Style.RESET_ALL)

         else:
        

           print(Fore.RED+ Style.BRIGHT +f'[-] {ajout}'+ Style.RESET_ALL)
           break 

      
 except TypeError:
    None
 except requests.exceptions.ConnectionError: 
    None 
if __name__=='__main__':

   parser = argparse.ArgumentParser(description="Open-redirect")
   parser.add_argument("-file", "--file", dest="file",
                  help="file contain targets ", required=False)

  
         
   parser.add_argument("-url", "--url", dest="url",
                  help="simple url", required=False)
         
   args = parser.parse_args()

   results=''

  
   with open('open-redirect.txt','r') as s:
       file=[files.strip() for files in s]
   add=''
   try:
    with open(args.file, 'r') as url :
       
       
       files=[urls.strip() for urls in url]
       add.join(files)
   except TypeError :
       None    
   header={'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
   main(file, add, args.url,header, results)
  
